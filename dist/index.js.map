{"version":3,"file":"index.js","sources":["../src/JsonElement.ts","../src/JsonArray.ts","../src/JsonNull.ts","../src/JsonObject.ts","../src/JsonPrimitive.ts"],"sourcesContent":["import { JsonArray, JsonNull, JsonObject, JsonPrimitive } from \".\";\n\nexport abstract class JsonElement {\n    private static readonly cache = new WeakMap<object, JsonElement>();\n\n    public static from(value: any): JsonElement {\n        if (value === null) return JsonNull.INSTANCE;\n\n        switch (typeof value) {\n            case \"object\": {\n                const cached = JsonElement.cache.get(value);\n\n                if (cached !== undefined) return cached;\n                if (Array.isArray(value)) return new JsonArray(value);\n\n                return new JsonObject(value);\n            }\n\n            case \"boolean\":\n            case \"number\":\n            case \"string\": return new JsonPrimitive(value);\n\n            default: throw new Error(\"Unsupported type of value\");\n        }\n    }\n\n    public isJsonArray(): this is JsonArray {\n        return this instanceof JsonArray;\n    }\n\n    public isJsonNull(): this is JsonNull {\n        return this instanceof JsonNull;\n    }\n\n    public isJsonObject(): this is JsonObject {\n        return this instanceof JsonObject;\n    }\n\n    public isJsonPrimitive(): this is JsonPrimitive {\n        return this instanceof JsonPrimitive;\n    }\n}\n","import { JsonElement } from \"./JsonElement\";\nimport { JsonObject } from \"./JsonObject\";\nimport { JsonPrimitive } from \"./JsonPrimitive\";\n\nexport class JsonArray extends JsonElement {\n    private readonly value: any[];\n\n    constructor(value: any[]) {\n        super();\n\n        this.value = value;\n    }\n\n    public get(index: number) {\n        if (index >= this.value.length) throw new RangeError(`${index} is out of range`);\n\n        const value = this.value[index];\n\n        if (value === undefined) throw new Error(`Index ${index} doesn't exist`);\n\n        return JsonElement.from(value);\n    }\n\n    public getAsJsonArray(index: number) {\n        const value = this.get(index);\n\n        if (!value.isJsonArray()) throw new Error(`Index ${index} is not array`);\n\n        return value;\n    }\n\n    public getAsJsonArrayTuple() {\n        const result: JsonArray[] = [];\n\n        for (let i = 0; i < this.value.length; i++) {\n            result.push(this.getAsJsonArray(i));\n        }\n\n        return result;\n    }\n\n    public getAsJsonObject(key: number) {\n        const value = this.get(key);\n\n        if (!value.isJsonObject()) throw new Error(`Index ${key} is not object`);\n\n        return value;\n    }\n\n    public getAsJsonObjectTuple() {\n        const result: JsonObject[] = [];\n\n        for (let i = 0; i < this.value.length; i++) {\n            result.push(this.getAsJsonObject(i));\n        }\n\n        return result;\n    }\n\n    public getAsJsonPrimitive(key: number) {\n        const value = this.get(key);\n\n        if (!value.isJsonPrimitive()) throw new Error(`Index ${key} is not primitive`);\n\n        return value;\n    }\n\n    public getAsJsonPrimitiveTuple() {\n        const result: JsonPrimitive[] = [];\n\n        for (let i = 0; i < this.value.length; i++) {\n            result.push(this.getAsJsonPrimitive(i));\n        }\n\n        return result;\n    }\n\n    public size() {\n        return this.value.length;\n    }\n\n    public values() {\n        return this.value.map((value) => {\n            return JsonElement.from(value);\n        });\n    }\n}\n","import { JsonElement } from \"./JsonElement\";\n\nexport class JsonNull extends JsonElement {\n    public static readonly INSTANCE = new JsonNull();\n\n    private constructor() {\n        super();\n    }\n}\n","import { JsonElement } from \"./JsonElement\";\n\nexport class JsonObject extends JsonElement {\n    private readonly value: any;\n\n    constructor(value: any) {\n        super();\n\n        this.value = value;\n    }\n\n    public get(key: string) {\n        const value = this.value[key];\n\n        if (value === undefined) throw new Error(`Property \"${key}\" doesn't exist`);\n\n        return JsonElement.from(value);\n    }\n\n    public getAsJsonArray(key: string) {\n        const value = this.get(key);\n\n        if (!value.isJsonArray()) throw new Error(`\"${key}\" is not array`);\n\n        return value;\n    }\n\n    public getAsJsonObject(key: string) {\n        const value = this.get(key);\n\n        if (!value.isJsonObject()) throw new Error(`\"${key}\" is not object`);\n\n        return value;\n    }\n\n    public getAsJsonPrimitive(key: string) {\n        const value = this.get(key);\n\n        if (!value.isJsonPrimitive()) throw new Error(`\"${key}\" is not primitive`);\n\n        return value;\n    }\n\n    public keys() {\n        return Object.keys(this.value);\n    }\n\n    public values() {\n        return Object.values(this.value).map((value) => {\n            return JsonElement.from(value);\n        });\n    }\n}\n","import { JsonElement } from \"./JsonElement\";\n\nexport type JsonPrimitiveValue = boolean | number | string;\n\nexport class JsonPrimitive extends JsonElement {\n    private readonly value: JsonPrimitiveValue;\n\n    constructor(value: JsonPrimitiveValue) {\n        super();\n\n        this.value = value;\n    }\n\n    public getAsBoolean() {\n        return Boolean(this.value);\n    }\n\n    public getAsNumber() {\n        return Number(this.value);\n    }\n\n    public getAsString() {\n        return String(this.value);\n    }\n\n    public isBoolean() {\n        return typeof this.value === \"boolean\";\n    }\n\n    public isNumber() {\n        return typeof this.value === \"number\";\n    }\n\n    public isString() {\n        return typeof this.value === \"string\";\n    }\n}\n"],"names":["JsonElement","[object Object]","value","JsonNull","INSTANCE","cached","cache","get","undefined","Array","isArray","JsonArray","JsonObject","JsonPrimitive","Error","this","WeakMap","super","index","length","RangeError","from","isJsonArray","result","i","push","getAsJsonArray","key","isJsonObject","getAsJsonObject","isJsonPrimitive","getAsJsonPrimitive","map","Object","keys","values","Boolean","Number","String"],"mappings":"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"}