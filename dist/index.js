!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports):"function"==typeof define&&define.amd?define(["exports"],t):t((e="undefined"!=typeof globalThis?globalThis:e||self).JsonTyped={})}(this,(function(e){"use strict";class t{static from(e){if(null===e)return s.INSTANCE;switch(typeof e){case"object":{const s=t.cache.get(e);return void 0!==s?s:Array.isArray(e)?new r(e):new n(e)}case"boolean":case"number":case"string":return new o(e);default:throw new Error("Unsupported type of value")}}isJsonArray(){return this instanceof r}isJsonNull(){return this instanceof s}isJsonObject(){return this instanceof n}isJsonPrimitive(){return this instanceof o}}t.cache=new WeakMap;class r extends t{constructor(e){super(),this.value=e}get(e){if(e>=this.value.length)throw new RangeError(`${e} is out of range`);const r=this.value[e];if(void 0===r)throw new Error(`Index ${e} doesn't exist`);return t.from(r)}getAsJsonArray(e){const t=this.get(e);if(!t.isJsonArray())throw new Error(`Index ${e} is not array`);return t}getAsJsonArrayTuple(){const e=[];for(let t=0;t<this.value.length;t++)e.push(this.getAsJsonArray(t));return e}getAsJsonObject(e){const t=this.get(e);if(!t.isJsonObject())throw new Error(`Index ${e} is not object`);return t}getAsJsonObjectTuple(){const e=[];for(let t=0;t<this.value.length;t++)e.push(this.getAsJsonObject(t));return e}getAsJsonPrimitive(e){const t=this.get(e);if(!t.isJsonPrimitive())throw new Error(`Index ${e} is not primitive`);return t}getAsJsonPrimitiveTuple(){const e=[];for(let t=0;t<this.value.length;t++)e.push(this.getAsJsonPrimitive(t));return e}size(){return this.value.length}values(){return this.value.map((e=>t.from(e)))}}class s extends t{constructor(){super()}}s.INSTANCE=new s;class n extends t{constructor(e){super(),this.value=e}get(e){const r=this.value[e];if(void 0===r)throw new Error(`Property "${e}" doesn't exist`);return t.from(r)}getAsJsonArray(e){const t=this.get(e);if(!t.isJsonArray())throw new Error(`"${e}" is not array`);return t}getAsJsonObject(e){const t=this.get(e);if(!t.isJsonObject())throw new Error(`"${e}" is not object`);return t}getAsJsonPrimitive(e){const t=this.get(e);if(!t.isJsonPrimitive())throw new Error(`"${e}" is not primitive`);return t}keys(){return Object.keys(this.value)}values(){return Object.values(this.value).map((e=>t.from(e)))}}class o extends t{constructor(e){super(),this.value=e}getAsBoolean(){return Boolean(this.value)}getAsNumber(){return Number(this.value)}getAsString(){return String(this.value)}isBoolean(){return"boolean"==typeof this.value}isNumber(){return"number"==typeof this.value}isString(){return"string"==typeof this.value}}e.JsonArray=r,e.JsonElement=t,e.JsonNull=s,e.JsonObject=n,e.JsonPrimitive=o,Object.defineProperty(e,"__esModule",{value:!0})}));//# sourceMappingURL=index.js.map
